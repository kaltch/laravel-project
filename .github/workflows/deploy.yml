# name: Deploy to Google Cloud Run
name: Deploy to GKE

# 當推送到 main 分支時觸發自動化部署
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # 使用最新的 Ubuntu 作業系統來執行工作
    runs-on: ubuntu-latest

    steps:
    # 檢查程式碼
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        which ssh-agent || (sudo apt-get update -y && sudo apt-get install openssh-client -y)
        eval $(ssh-agent -s)
        echo "${{ secrets.SSH_PRIVATE_KEY_GCE }}" | tr -d '\r' > deploy.pem
        chmod 400 deploy.pem
        ssh-add deploy.pem
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    - name: Check docker images and containers on remote host
      run: |
        ssh ${{ secrets.GCE_LOGIN_USER }}@${{ secrets.GCP_VM_HOST }} "docker images && docker ps -a"

    - name: Clear existing Docker container and run new one
      run: |
        ssh ${{ secrets.GCE_LOGIN_USER }}@${{ secrets.GCP_VM_HOST }} "docker-compose down"
        ssh ${{ secrets.GCE_LOGIN_USER }}@${{ secrets.GCP_VM_HOST }} "docker-compose up -d"

    
    # ------------ cloud run ------------
    # 設定 GCP 認證
    # - name: Set up Cloud SDK
    #   uses: google-github-actions/setup-gcloud@v1
    #   with:
    #     service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    #     project_id: ${{ secrets.PROJECT_ID }}

    # 建置並推送 Docker 映像
    # - name: Build and push Docker image
    #   run: |
    #     docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/laravel-app/laravel-app:latest .
    #     docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/laravel-app/laravel-app:latest

    # 部署到 Google Cloud Run
    # - name: Deploy to Cloud Run
    #   run: |
    #     gcloud run deploy laravel-app \
    #       --image ${{ secrets.REGION }}/${{ secrets.PROJECT_ID }}/laravel-app/laravel-app:latest \
    #       --platform managed \
    #       --region ${{ secrets.REGION }} \
    #       --allow-unauthenticated
    #       --add-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }} \
    #       --set-env-vars APP_ENV=production,APP_KEY=${{ secrets.APP_KEY }},DB_CONNECTION=mysql,DB_HOST=127.0.0.1,DB_PORT=3306,DB_DATABASE=${{ secrets.DB_DATABASE }},DB_USERNAME=${{ secrets.DB_USERNAME }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_SOCKET=/cloudsql/${{ secrets.INSTANCE_CONNECTION_NAME }}
